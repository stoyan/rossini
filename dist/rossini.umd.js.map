{"version":3,"file":"rossini.umd.js","sources":["../rossini.js"],"sourcesContent":["'use strict';\n\n/**\n * Queries the DOM for the first element matching the given CSS selector.\n * This is an alias for `document.querySelector()`.\n *\n * @param {string} selector - The CSS selector string (e.g., '#myId', '.myClass', 'div.active')\n * @returns {Element | null} The first `Element` that matches the selector, or `null` if no element is found\n */\nconst que = (selector) => document.querySelector(selector);\n\n/**\n * Attaches an event listener to a DOM element.\n * Can accept either a CSS selector string or a direct DOM element.\n *\n * @param {string|Element} selectorOrElement - The CSS selector string or the DOM element itself.\n * @param {string} eventName - The name of the event (e.g., 'click', E.click).\n * @param {function(Event, Element): void} callback - The function to execute when the event occurs.\n * It receives the Event object and the matched Element.\n * @returns {function(): void|null} A cleanup function to remove the listener, or null if no element was found.\n */\nconst on = (selectorOrElement, eventName, callback) => {\n  let element = null;\n\n  if (typeof selectorOrElement === 'string') {\n    element = que(selectorOrElement);\n  } else if (selectorOrElement instanceof Node) {\n    element = selectorOrElement;\n  } else {\n    return null;\n  }\n\n  if (!element) {\n    return null;\n  }\n  const eventHandler = (event) => {\n    callback(event, element);\n  };\n\n  element.addEventListener(eventName, eventHandler);\n\n  return () => {\n    element.removeEventListener(eventName, eventHandler);\n  };\n};\n\n/**\n * Creates a new DOM element with specified tag, attributes, and children.\n * Children can be passed as separate arguments following the `attributes` argument\n *\n * @param {string} tagName - The HTML tag name (e.g., 'div', 'p')\n * @param {Object} [attributes={}] - An optional object of attributes (e.g., { id: 'myId', class: 'my-class' })\n * @param {...(string|Node)} children - Any number of child nodes: strings (for text nodes) or DOM elements\n * @returns {HTMLElement} The newly created DOM element\n */\nconst el = (tagName, attributes = {}, ...children) => {\n  const element = document.createElement(tagName);\n\n  for (const key in attributes) {\n    if (attributes.hasOwnProperty(key)) {\n      element.setAttribute(key, attributes[key]);\n    }\n  }\n\n  children.forEach((child) => {\n    if (typeof child === 'string') {\n      element.appendChild(document.createTextNode(child));\n    } else if (child instanceof Node) {\n      element.appendChild(child);\n    }\n  });\n\n  return element;\n};\n\n/**\n * Object containing common DOM event names to minimize string typing and typos\n * @readonly\n * @enum {string}\n */\nconst E = {\n  click: 'pointerdown',\n  load: 'load',\n  DOMContentLoaded: 'DOMContentLoaded',\n  dcl: 'DOMContentLoaded',\n};\n\nexport {que, on, el, E};\n"],"names":["que","selector","document","querySelector","click","load","DOMContentLoaded","dcl","tagName","attributes","children","element","createElement","key","hasOwnProperty","setAttribute","forEach","child","appendChild","createTextNode","Node","selectorOrElement","eventName","callback","eventHandler","event","addEventListener","removeEventListener"],"mappings":"+OASM,MAAAA,EAAOC,GAAaC,SAASC,cAAcF,OAuEvC,CACRG,MAAO,cACPC,KAAM,OACNC,iBAAkB,mBAClBC,IAAK,yBA7BI,CAACC,EAASC,EAAa,CAAE,KAAKC,KACvC,MAAMC,EAAUT,SAASU,cAAcJ,GAEvC,IAAK,MAAMK,KAAOJ,EACZA,EAAWK,eAAeD,IAC5BF,EAAQI,aAAaF,EAAKJ,EAAWI,IAYzC,OARAH,EAASM,SAASC,IACK,iBAAVA,EACTN,EAAQO,YAAYhB,SAASiB,eAAeF,IACnCA,aAAiBG,MAC1BT,EAAQO,YAAYD,MAIjBN,QAnDE,CAACU,EAAmBC,EAAWC,KACxC,IAAIZ,EAAU,KAEd,GAAiC,iBAAtBU,EACTV,EAAUX,EAAIqB,OACT,MAAIA,aAA6BD,MAGtC,OAAO,KAFPT,EAAUU,CAGd,CAEE,IAAKV,EACH,OAAO,KAET,MAAMa,EAAgBC,IACpBF,EAASE,EAAOd,IAKlB,OAFAA,EAAQe,iBAAiBJ,EAAWE,GAE7B,KACLb,EAAQgB,oBAAoBL,EAAWE"}